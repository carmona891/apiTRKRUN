// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TRKRUN.Context;

#nullable disable

namespace TRKRUN.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250601162009_PointsToUsers")]
    partial class PointsToUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TRKRUN.Identity.Circuito", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ubicacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Circuito");
                });

            modelBuilder.Entity("TRKRUN.Identity.Rol", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("TRKRUN.Identity.Torneo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("circuito_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("premio")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("circuito_id");

                    b.ToTable("Torneo");
                });

            modelBuilder.Entity("TRKRUN.Identity.User", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("points")
                        .HasColumnType("int");

                    b.Property<int>("rol_id")
                        .HasColumnType("int");

                    b.Property<int?>("torneo_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("rol_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserTorneo", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<int>("torneo_id")
                        .HasColumnType("int");

                    b.HasKey("user_id", "torneo_id");

                    b.HasIndex("torneo_id");

                    b.ToTable("UserTorneo", (string)null);
                });

            modelBuilder.Entity("TRKRUN.Identity.Torneo", b =>
                {
                    b.HasOne("TRKRUN.Identity.Circuito", "Circuito")
                        .WithMany("Torneos")
                        .HasForeignKey("circuito_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuito");
                });

            modelBuilder.Entity("TRKRUN.Identity.User", b =>
                {
                    b.HasOne("TRKRUN.Identity.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("rol_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("UserTorneo", b =>
                {
                    b.HasOne("TRKRUN.Identity.Torneo", null)
                        .WithMany()
                        .HasForeignKey("torneo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRKRUN.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRKRUN.Identity.Circuito", b =>
                {
                    b.Navigation("Torneos");
                });
#pragma warning restore 612, 618
        }
    }
}
